# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n
#  para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 
# y el n√∫mero que indique el usuario

# Solicitar n√∫mero al usuario
num = int(input("Ingrese un numero para calcular sus factoriales desde 1 hasta ese numero: "))

# Funci√≥n recursiva para calcular el factorial
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

# Programa principal
if num < 1:
    print("Ingrese un numero mayor o igual a 1")
else:
    for i in range(1, num + 1):
        print(f"Factorial de {i} es {factorial(i)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
#  Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# deficio de la funcion

def fibonacci_recursivo(posicion):
    if posicion==0:
        return 0
    elif posicion == 1:
        return 1
    else:
        return fibonacci_recursivo(posicion -1) + fibonacci_recursivo(posicion-2)
# Solicitar n√∫mero al usuario
posicion = int(input("Ingrese un numero para calcular el valor de la s.fibbonacci: "))  
print("Serie de Fibonacci hasta la posici√≥n", posicion, ":")
for i in range(posicion + 1):
    print(f" En la posicion {i} obtenemos el valor de fibonacchi :{fibonacci_recursivo(i)}") 

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
#  utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general

# Funci√≥n recursiva para la potencia
def potencia_recursiva(base, exponente):
    if exponente == 0:
        return 1  # todo valor elevado a 0 es 1
    else:
        return base * potencia_recursiva(base, exponente - 1)

# Algoritmo general que solicita datos al usuario
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

resultado = potencia_recursiva(base, exponente)
print(f"{base} elevado a {exponente} es igual a {resultado}")
     
#4)Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal
#  y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(num):
    if num < 2:
        return str(num)
    else:
        return decimal_a_binario(num // 2) + str(num % 2)

# Solicitar al usuario
numero = int(input("Ingrese un numero entero positivo: "))

if numero < 0:
    print("Ingrese un numero positivo.")
else:
    binario = decimal_a_binario(numero)
    print(f"El numero {numero} en binario es: {binario}")     

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes,
#  y devuelva True si es un pal√≠ndromo o False si no lo es. La soluci√≥n debe ser recursiva. No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    # si la palabra tiene 0 o 1 letra, es pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Comparar primera y √∫ltima letra
    if palabra[0] != palabra[-1]:
        return False
    # Llamada recursiva extrayendo los extremos de la palabra(se saca [0] y [:-1] la ultima posicion de la palabra)
    return es_palindromo(palabra[1:-1])

# Solicitar palabra la usuario
palabra = input("Ingrese una palabra sin espacios ni tildes: ")
resultado = es_palindromo(palabra)
print(f"La palabra ingresada es pal√≠ndromo: {resultado}")    

#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo
#  y devuelva la suma de todos sus d√≠gitos. No se puede convertir el n√∫mero a string. Us√° operaciones matem√°ticas (%, //) y recursi√≥n.


def suma_digitos(num):
    if num < 10:
        return num
    else:
        return (num % 10) + suma_digitos(num // 10)
n= int(input("Ingrese un numero entero y positivo: "))

print(suma_digitos(n))

#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, 
# en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo 
# y devuelva el total de bloques que necesita para construir toda la pir√°mide.


def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

n_bloques= int(input("Ingrese el n de bloques en el viel m√°s bajo: "))
bloques_totales=contar_bloques(n_bloques)
print(f"Se necesitan un total de {bloques_totales} bloques")



#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito)
#  que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9),
# y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

numero= int(input("Ingrese un numero: "))
digito=int(input("ingrese un digito: "))
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        ult = numero % 10
        resto = numero // 10
        if ult == digito:
            return 1 + contar_digito(resto, digito)
        else:
            return contar_digito(resto, digito)
        
print(f" en {numero} el digito {digito } se repite {contar_digito(numero, digito)} veces")